// load-config.js - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
(async function() {
    console.log('üîÑ Loading configuration...');
    
    const configSources = [
        // –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ü—Ä—è–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        async () => {
            if (window.SUPABASE_URL && window.SUPABASE_ANON_KEY) {
                return { source: 'inline', config: { SUPABASE_URL: window.SUPABASE_URL, SUPABASE_ANON_KEY: window.SUPABASE_ANON_KEY } };
            }
            return null;
        },
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫ 2: API endpoint (–¥–ª—è Vercel)
        async () => {
            try {
                const response = await fetch('/api/config');
                if (response.ok) {
                    const jsCode = await response.text();
                    eval(jsCode); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º API
                    return { source: 'api', config: { SUPABASE_URL: window.SUPABASE_URL, SUPABASE_ANON_KEY: window.SUPABASE_ANON_KEY } };
                }
            } catch (error) {
                console.log('API config not available:', error.message);
            }
            return null;
        },
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π config.js
        async () => {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π config.js
                if (typeof window.loadConfig === 'undefined') {
                    await new Promise((resolve, reject) => {
                        const script = document.createElement('script');
                        script.src = '/config.js';
                        script.onload = resolve;
                        script.onerror = reject;
                        document.head.appendChild(script);
                    });
                }
                if (window.SUPABASE_URL && window.SUPABASE_ANON_KEY) {
                    return { source: 'static', config: { SUPABASE_URL: window.SUPABASE_URL, SUPABASE_ANON_KEY: window.SUPABASE_ANON_KEY } };
                }
            } catch (error) {
                console.log('Static config not available:', error.message);
            }
            return null;
        },
        
        // –ò—Å—Ç–æ—á–Ω–∏–∫ 4: –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        async () => {
            const fallbackConfig = {
                SUPABASE_URL: 'https://dtjhlanmwjpdcdxgzzyo.supabase.co',
                SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR0amhsYW5td2pwZGNkeGd6enlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY4MDUwOTIsImV4cCI6MjA3MjM4MTA5Mn0.jS4DXQSOBawRFtnzjsmF5AzzltDYAG0AXrwrY1B0UpY'
            };
            
            window.SUPABASE_URL = fallbackConfig.SUPABASE_URL;
            window.SUPABASE_ANON_KEY = fallbackConfig.SUPABASE_ANON_KEY;
            
            return { source: 'fallback', config: fallbackConfig };
        }
    ];
    
    // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const source of configSources) {
        try {
            const result = await source();
            if (result) {
                console.log(`‚úÖ Configuration loaded from: ${result.source}`);
                console.log('üîß Supabase URL:', result.config.SUPABASE_URL ? '‚úÖ' : '‚ùå');
                
                // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                window.dispatchEvent(new CustomEvent('configLoaded', { 
                    detail: result 
                }));
                
                return;
            }
        } catch (error) {
            console.log(`Config source failed:`, error.message);
            continue;
        }
    }
    
    console.error('‚ùå All configuration sources failed!');
})();